1) add common folder
2) move models to common folder
3) add DataParserModel, it satisfy classes args for JsonConductor & DataParser
4) add DataParser common class witch: get http data, tag replacer, make next & last tours json, get_html_for_last_tour
5) add JsonConductor common class witch: operate with json write & read from file
6) add DataUtils common class witch: get host & gest commands & scores
7) add new file witch: inside will get data for all main championship
8) add type hint for common file


=======
MR debug_db
1) add db-extract-interface
2) add DataBaseReader guest_result & host_result methods for command
3) methods call drop to debug.py
!
main

v_seo_03
update NEAREST_SCHEDULE models
сгрумили задачи



TODO


v_seo_06 +
А.
1) получить данные всех матчей для команды хозяев {'host_stats_command':[{},{}]}
2) разделить тотал забитых голов на кол-во матчей в домашних встречах ({'h_tot_gsc': 0})
2,2) разделить тотал забитых на выезде на кол-во в гостевых матчей ({'host_guest_total_score'})
3) разделить тотал пропущенных голов на кол-во домашних матчей ({'h_tot_lost': 0})
3,3 разделить тотал пропущенных голов на кол-во гостевых матчей ({'host_guest_total_lost'})
4) разделить забитые голы на пропущенные ({'host_total_host_efficiency': 0})
4,4 разделить все забитые на все пропущенные ({'host_total_all_efficiency'})
5) predictions{
    'should_score_1'
    'should_score_1*5'
    'should_score 2.5'
    'should_lost_1'
    'should_lost_1*5'
}
Б.
5) получить данные для гостевых матчей  {'guest_stats_command': [{},{}]}
6) разделить тотал забитых голов на кол-во матчей ({'g_tot_gsc': 0})
7) разделить тотал пропущенных голов на кол-во матчей ({'g_tot_gusc': 0})
8) разделить забитые голы на пропущенные ({'g_tot_sc_usc': 0})


v_seo_04                                                    +
Получать данные о событиях для всех лиг
1) добавить ссылки в массив
2) сделать цикл, удалить запись в тхт, лишние принты
3) исследовать как избавиться от промежуточной записи json

Next_task
v_seo_05
Добавить History data из debug_db в NEAREST_SCHEDULE
1) сделать методы, которые будут возвращать объект с интерфейсом DataDBReaderInterface
1.1) сделать маппинг команд  +
2) получить данные для команды хозяев и гостей  +
2.2) вынести дб & json логику из common                +
3) добавить генерацию NEAREST_SCHEDULE для каждой встречи +
3.1) вынести логику наполнеия моделей                  +
3.2) создать события для разных слоев                  +
4) добавить в history_host списки с результатами       +
4) добавить в history_guest списки с результатами      +


v_seo_07
Расширить NEAREST_SCHEDULE индексами оценки команды (predictions) +-
добавить в модели host_analytics_data, +
добавить в модели total_predict -
добавить host_analytics_data, guest_analytics_data, total_predict в data_maker.py +
добавить в next_schedule поля host_analytics_data guest_analytics_data, total_predict -



Done
сделать генерацию встреч через результаты +

Done
добавить новые лиги    +

Done
добавить позиции в таблице для команд в json_schedule +
сделать метод который будет получать дату и название лиги +
смотреть на название и ходить по адресу за данными +
получить данные 1 раз +
найти позицию команды в таблице дописать в словарь+

сделать тригеры для ставок из множества событий +
(host_position, guest_position, host_total_games_score,
prediction_score, prediction_lost
)

next_task
сделать общий предикт для встреч:
сделать метод который будет принимать 1 словаря
сделать методы для скоринга


возвращать словарь total_predict [
        total_score_0.5 - True
        total_score_1.5 strong - True
        total_score_1,5 risk - True
        both_score strong  - True
        both_score risk - True
        not_recommended - True
]


curl 'https://firebase.googleapis.com/v1alpha/projects/-/apps/1:1041482749526:web:9365699b4ff68ade/webConfig' --compressed -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0' -H 'Accept: application/json' -H 'Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3' -H 'Accept-Encoding: gzip, deflate, br, zstd' -H 'Referer: https://www.sofascore.com/' -H 'x-goog-api-key: AIzaSyArB9icanQcowNRV2X4Oz0WcSEtMw2B5Ok' -H 'Origin: https://www.sofascore.com' -H 'Connection: keep-alive' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: cross-site' -H 'Priority: u=4' -H 'TE: trailers'

может одна ли забить  +
host
если разница между командами больше 1
если команда забивает больше 1.45
если ее эффективность выше 1
если ее общая эффективность выше 0.86
если команда 2 пропускает больше 1.3
guest
если гости меньше чем хозяева на 5 позиций
если разница по мат.модулю между гостями и хозяевами больше 1
если гости забивает больше 1.45
если ее эффективность выше 1
если ее общая эффективность выше 0.86
если хозяева пропускает больше 1.3

может ли забить 2 без риска
host
вар |
если хозяева меньше гостей
если разница по модулю между командами больше 9
если команда забивает больше 1.78
если ее эффективность выше 1.25
если ее общая эффективность выше 1.1
если команда 2 пропускает больше 1.1
вар ||
если разница по модулю между командами меньше 6
если команда забивает больше 1.98
если ее эффективность выше 1.48
если команда 2 пропускает больше 1.6
guest
если гости меньше чем хозяева на 8 позиций
если гости забивает больше 1.86
если ее эффективность выше 1.45
если ее общая эффективность выше 1.1
если хозяева пропускает больше 1.6

обе забьют не риск
если хосты меньше чем гости на 6 позиций и они меньше
если хосты забивают больше 1.56
если хосты пропускают больше 1.1
если эффективность хостов выше 1.4
если гости забивают больше 1.63
если гости пропускают больше 0.78
если эффективность гостей выше 1.45

обработать игры бех входного джсона
дропать входной джон
получать и парсить
сделать поля для записи
записать в словарь в цикле
